'use strict';var re={};var sys={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,
__ior__,__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,
filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as __module_re__ from"./re.js";__nest__(re,"",__module_re__);import{VMEval,get_prelude_env}from"./eeval.js";import{ParseError,parse_to_ast}from"./parse.js";import*as __module_sys__ from"./sys.js";__nest__(sys,"",__module_sys__);
var __name__="__main__";export var log=function(s){try{console.log(s)}catch(__except0__){print(s)}};export var init_doc="---\n\n- - defmacro\n  - lambda\n\n  - - '&lambda'\n    - - quote\n      - args\n      - '&rest'\n      - code\n\n    - - '&apply'\n      - '&lambda'\n      - - quote\n        - - '&apply.tolist'\n          - args\n        - - '&list.eval'\n          - code\n\n\n- - defmacro\n  - if\n  - - lambda\n    - - expr\n      - then\n      - else\n\n    - - '&apply'\n      - '&if'\n      - - list\n        - expr\n        - - '&lambda'\n          - []\n          - then\n\n        - - '&lambda'\n          - []\n          - else\n\n\n- - defmacro\n  - defun\n  - - lambda\n    - - name\n      - args\n      - '&rest'\n      - code\n\n    - - eval\n      - - '&apply'\n        - define\n        - - list\n          - name\n          - - '&lambda'\n            - - '&apply.tolist'\n              - args\n            - - '&list.eval'\n              - code\n\n\n- - defmacro\n  - cond\n\n  - - lambda\n    - - expr\n      - then\n      - '&rest'\n      - cont\n\n    - - '&if'\n      - - empty?\n        - cont\n      - - lambda\n        - []\n\n        - - callmacro\n          - 'if'\n          - - list\n            - expr\n            - then\n            - null\n\n      - - lambda\n        - []\n\n        - - callmacro\n          - 'if'\n          - - list\n            - expr\n            - then\n            - - callmacro\n              - cond\n              - cont\n\n\n";
export var default_doc="---\n\n- - defun\n  - fac'\n  - - x\n    - acc\n  - - if\n    - - eq?\n      - x\n      - 1\n    - acc\n    - - fac'\n      - - '-'\n        - x\n        - 1\n      - - '*'\n        - acc\n        - x\n\n- - defun\n  - fac\n  - - x\n  - - fac'\n    - x\n    - 1\n\n- - fac\n  - 10\n\n";export var main=function(doc){try{var init=parse_to_ast(init_doc);var prog=parse_to_ast(doc,init)}catch(__except0__){if(isinstance(__except0__,ParseError))return"Parse error: "+str(e.__args__);
else throw __except0__;}var env=get_prelude_env();var eval1=VMEval();try{var x=eval1.__call__(env,prog);print("Result = {}".format(x));return str(x)}catch(__except0__){if(isinstance(__except0__,Exception)){var e=__except0__;log(e);return str(e.__args__)}else throw __except0__;}finally{eval1.stats.print()}};

//# sourceMappingURL=main.map