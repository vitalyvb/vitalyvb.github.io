'use strict';var re={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,
filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as __module_re__ from"./re.js";__nest__(re,"",__module_re__);import{CollectionNode,MappingNode,Node,ScalarNode,SequenceNode}from"./nodes.js";import{Mark,MarkedYAMLError,YAMLError}from"./error.js";var __name__="resolver";export var __all__=
["BaseResolver","Resolver"];export var ResolverError=__class__("ResolverError",[YAMLError],{__module__:__name__});export var NoneResolver="AGFGHFDGHDFHDFGH";export var BaseResolver=__class__("BaseResolver",[object],{__module__:__name__,DEFAULT_SCALAR_TAG:"tag:yaml.org,2002:str",DEFAULT_SEQUENCE_TAG:"tag:yaml.org,2002:seq",DEFAULT_MAPPING_TAG:"tag:yaml.org,2002:map",yaml_implicit_resolvers:dict({}),yaml_path_resolvers:dict({}),get __init__(){return __get__(this,function(self){self.resolver_exact_paths=
[];self.resolver_prefix_paths=[]})},get add_implicit_resolver(){return __getcm__(this,function(cls,tag,regexp,first){if(first===null)var first=[NoneResolver];for(var ch of first)if(__in__(ch,cls.yaml_implicit_resolvers))cls.yaml_implicit_resolvers[ch].append(tuple([tag,regexp]));else cls.yaml_implicit_resolvers[ch]=[tuple([tag,regexp])]})},get add_path_resolver(){return __getcm__(this,function(cls,tag,path,kind){if(typeof kind=="undefined"||kind!=null&&kind.hasOwnProperty("__kwargtrans__"))var kind=
null;if(!__in__("yaml_path_resolvers",cls.__dict__))cls.yaml_path_resolvers=cls.yaml_path_resolvers.copy();var new_path=[];for(var element of path){if(isinstance(element,tuple([list,tuple])))if(len(element)==2){var __left0__=element;var node_check=__left0__[0];var index_check=__left0__[1]}else if(len(element)==1){var node_check=element[0];var index_check=true}else{var __except0__=ResolverError(__mod__("Invalid path element: %s",element));__except0__.__cause__=null;throw __except0__;}else{var node_check=
null;var index_check=element}if(node_check===str)var node_check=ScalarNode;else if(node_check===list)var node_check=SequenceNode;else if(node_check===dict)var node_check=MappingNode;else if(!__in__(node_check,[ScalarNode,SequenceNode,MappingNode])&&!isinstance(node_check,str)&&node_check!==null){var __except0__=ResolverError(__mod__("Invalid node checker: %s",node_check));__except0__.__cause__=null;throw __except0__;}if(!isinstance(index_check,tuple([str,int]))&&index_check!==null){var __except0__=
ResolverError(__mod__("Invalid index checker: %s",index_check));__except0__.__cause__=null;throw __except0__;}new_path.append(tuple([node_check,index_check]))}if(kind===str)var kind=ScalarNode;else if(kind===list)var kind=SequenceNode;else if(kind===dict)var kind=MappingNode;else if(!__in__(kind,[ScalarNode,SequenceNode,MappingNode])&&kind!==null){var __except0__=ResolverError(__mod__("Invalid node kind: %s",kind));__except0__.__cause__=null;throw __except0__;}cls.yaml_path_resolvers.__setitem__([tuple(new_path),
kind],tag)})},get descend_resolver(){return __get__(this,function(self,current_node,current_index){if(!self.yaml_path_resolvers)return;var exact_paths=dict({});var prefix_paths=[];if(current_node)var depth=len(self.resolver_prefix_paths);else for(var [path,kind]of self.yaml_path_resolvers.py_items())if(!path)exact_paths[kind]=self.yaml_path_resolvers.__getitem__([path,kind]);else prefix_paths.append(tuple([path,kind]));self.resolver_exact_paths.append(exact_paths);self.resolver_prefix_paths.append(prefix_paths)})},
get ascend_resolver(){return __get__(this,function(self){if(!self.yaml_path_resolvers)return;self.resolver_exact_paths.py_pop();self.resolver_prefix_paths.py_pop()})},get check_resolver_prefix(){return __get__(this,function(self,depth,path,kind,current_node,current_index){var __left0__=path[depth-1];var node_check=__left0__[0];var index_check=__left0__[1];if(isinstance(node_check,str)){if(current_node.tag!=node_check)return}else if(node_check!==null)if(!isinstance(current_node,node_check))return;
if(index_check===true&&current_index!==null)return;if((index_check===false||index_check===null)&&current_index===null)return;if(isinstance(index_check,str)){if(!(isinstance(current_index,ScalarNode)&&index_check==current_index.value))return}else if(isinstance(index_check,int)&&!isinstance(index_check,bool))if(index_check!=current_index)return;return true})},get resolve(){return __get__(this,function(self,kind,value,implicit){if(kind===ScalarNode&&implicit[0]){if(value=="")var resolvers=self.yaml_implicit_resolvers.py_get("",
[]);else var resolvers=self.yaml_implicit_resolvers.py_get(value[0],[]);if(__in__(NoneResolver,self.yaml_implicit_resolvers))resolvers.append(self.yaml_implicit_resolvers.py_get(NoneResolver));for(var a of resolvers){var tag=a[0];var regexp=a[1];if(regexp.match(value))return tag}var implicit=implicit[1]}if(self.yaml_path_resolvers){var exact_paths=self.resolver_exact_paths[-1];if(__in__(kind,exact_paths))return exact_paths[kind];if(__in__(null,exact_paths))return exact_paths[null]}if(kind===ScalarNode)return self.DEFAULT_SCALAR_TAG;
else if(kind===SequenceNode)return self.DEFAULT_SEQUENCE_TAG;else if(kind===MappingNode)return self.DEFAULT_MAPPING_TAG})}});export var Resolver=__class__("Resolver",[BaseResolver],{__module__:__name__});Resolver.add_implicit_resolver("tag:yaml.org,2002:bool",re.compile("^(?:yes|Yes|YES|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)$"),list("yYnNtTfFoO"));Resolver.add_implicit_resolver("tag:yaml.org,2002:float",re.compile("^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?|\\.[0-9_]+(?:[eE][-+][0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"),
list("-+0123456789."));Resolver.add_implicit_resolver("tag:yaml.org,2002:int",re.compile("^(?:[-+]?0b[0-1_]+|[-+]?0[0-7_]+|[-+]?(?:0|[1-9][0-9_]*)|[-+]?0x[0-9a-fA-F_]+|[-+]?[1-9][0-9_]*(?::[0-5]?[0-9])+)$"),["-","+","0","1","2","3","4","5","6","7","8","9"]);Resolver.add_implicit_resolver("tag:yaml.org,2002:merge",re.compile("^(?:<<)$"),["<"]);Resolver.add_implicit_resolver("tag:yaml.org,2002:null",re.compile("^(?: ~|null|Null|NULL| )$"),["~","n","N",""]);Resolver.add_implicit_resolver("tag:yaml.org,2002:timestamp",
re.compile("^(?:[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]|[0-9][0-9][0-9][0-9] -[0-9][0-9]? -[0-9][0-9]?(?:[Tt]|[ \\t]+)[0-9][0-9]?:[0-9][0-9] :[0-9][0-9] (?:\\.[0-9]*)?(?:[ \\t]*(?:Z|[-+][0-9][0-9]?(?::[0-9][0-9])?))?)$"),list("0123456789"));Resolver.add_implicit_resolver("tag:yaml.org,2002:value",re.compile("^(?:=)$"),["="]);Resolver.add_implicit_resolver("tag:yaml.org,2002:yaml",re.compile("^(?:!|&|\\*)$"),list("!&*"));

//# sourceMappingURL=resolver.map