'use strict';var datetime={};var re={};var sys={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,
__in__,__init__,__ior__,__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,
dir,divmod,enumerate,filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as __module_datetime__ from"./datetime.js";__nest__(datetime,"",__module_datetime__);import*as __module_re__ from"./re.js";__nest__(re,"",__module_re__);import*as __module_sys__ from"./sys.js";__nest__(sys,
"",__module_sys__);import{CollectionNode,MappingNode,Node,ScalarNode,SequenceNode}from"./nodes.js";import{Mark,MarkedYAMLError,YAMLError}from"./error.js";var __name__="constructor";export var __all__=["BaseConstructor","SafeConstructor","Constructor","ConstructorError"];export var ConstructorError=__class__("ConstructorError",[MarkedYAMLError],{__module__:__name__});export var BaseConstructor=__class__("BaseConstructor",[object],{__module__:__name__,yaml_constructors:dict({}),yaml_multi_constructors:dict({}),
get __init__(){return __get__(this,function(self){self.constructed_objects=dict({});self.recursive_objects=dict({});self.state_generators=[];self.deep_construct=false})},get check_data(){return __get__(this,function(self){return self.check_node()})},get get_data(){return __get__(this,function(self){if(self.check_node())return self.construct_document(self.get_node())})},get get_single_data(){return __get__(this,function(self){var node=self.get_single_node();if(node!==null)return self.construct_document(node);
return null})},get construct_document(){return __get__(this,function(self,node){var data=self.construct_object(node);while(self.state_generators){var state_generators=self.state_generators;self.state_generators=[];for(var generator of state_generators)for(var dummy of generator);}self.constructed_objects=dict({});self.recursive_objects=dict({});self.deep_construct=false;return data})},get construct_object(){return __get__(this,function(self,node,deep){if(typeof deep=="undefined"||deep!=null&&deep.hasOwnProperty("__kwargtrans__"))var deep=
false;if(__in__(node,self.constructed_objects))return self.constructed_objects[node];if(deep){var old_deep=self.deep_construct;self.deep_construct=true}if(__in__(node,self.recursive_objects)){var __except0__=ConstructorError(null,null,"found unconstructable recursive node",node.start_mark);__except0__.__cause__=null;throw __except0__;}self.recursive_objects[node]=null;var constructor=null;var tag_suffix=null;if(__in__(node.tag,self.yaml_constructors))var constructor=self.yaml_constructors[node.tag];
else{var __break0__=false;for(var tag_prefix of self.yaml_multi_constructors)if(node.tag.startswith(tag_prefix)){var tag_suffix=node.tag.__getslice__(len(tag_prefix),null,1);var constructor=self.yaml_multi_constructors[tag_prefix];__break0__=true;break}if(!__break0__)if(__in__(null,self.yaml_multi_constructors)){var tag_suffix=node.tag;var constructor=self.yaml_multi_constructors[null]}else if(__in__(null,self.yaml_constructors))var constructor=self.yaml_constructors[null];else if(isinstance(node,
ScalarNode))var constructor=self.__class__.construct_scalar;else if(isinstance(node,SequenceNode))var constructor=self.__class__.construct_sequence;else if(isinstance(node,MappingNode))var constructor=self.__class__.construct_mapping}if(tag_suffix===null)var data=constructor(self,node);else var data=constructor(self,tag_suffix,node);self.constructed_objects[node]=data;delete self.recursive_objects[node];if(deep)self.deep_construct=old_deep;return data})},get construct_scalar(){return __get__(this,
function(self,node){if(!isinstance(node,ScalarNode)){var __except0__=ConstructorError(null,null,__mod__("expected a scalar node, but found %s",node.id),node.start_mark);__except0__.__cause__=null;throw __except0__;}return node.value})},get construct_sequence(){return __get__(this,function(self,node,deep){if(typeof deep=="undefined"||deep!=null&&deep.hasOwnProperty("__kwargtrans__"))var deep=false;if(!isinstance(node,SequenceNode)){var __except0__=ConstructorError(null,null,__mod__("expected a sequence node, but found %s",
node.id),node.start_mark);__except0__.__cause__=null;throw __except0__;}return function(){var __accu0__=[];for(var child of node.value)__accu0__.append(self.construct_object(child,__kwargtrans__({deep:deep})));return __accu0__}()})},get construct_mapping(){return __get__(this,function(self,node,deep){if(typeof deep=="undefined"||deep!=null&&deep.hasOwnProperty("__kwargtrans__"))var deep=false;if(!isinstance(node,MappingNode)){var __except0__=ConstructorError(null,null,__mod__("expected a mapping node, but found %s",
node.id),node.start_mark);__except0__.__cause__=null;throw __except0__;}var mapping=dict({});for(var [key_node,value_node]of node.value){var key=self.construct_object(key_node,__kwargtrans__({deep:deep}));var value=self.construct_object(value_node,__kwargtrans__({deep:deep}));mapping[key]=value}return mapping})},get construct_pairs(){return __get__(this,function(self,node,deep){if(typeof deep=="undefined"||deep!=null&&deep.hasOwnProperty("__kwargtrans__"))var deep=false;if(!isinstance(node,MappingNode)){var __except0__=
ConstructorError(null,null,__mod__("expected a mapping node, but found %s",node.id),node.start_mark);__except0__.__cause__=null;throw __except0__;}var pairs=[];for(var [key_node,value_node]of node.value){var key=self.construct_object(key_node,__kwargtrans__({deep:deep}));var value=self.construct_object(value_node,__kwargtrans__({deep:deep}));pairs.append(tuple([key,value]))}return pairs})},get add_constructor(){return __getcm__(this,function(cls,tag,constructor){cls.yaml_constructors[tag]=constructor})},
get add_multi_constructor(){return __getcm__(this,function(cls,tag_prefix,multi_constructor){cls.yaml_multi_constructors[tag_prefix]=multi_constructor})}});export var SafeConstructor=__class__("SafeConstructor",[BaseConstructor],{__module__:__name__,get construct_scalar(){return __get__(this,function(self,node){if(isinstance(node,MappingNode))for(var [key_node,value_node]of node.value)if(key_node.tag=="tag:yaml.org,2002:value")return self.construct_scalar(value_node);return __super__(SafeConstructor,
"construct_scalar")(self,node)})},get flatten_mapping(){return __get__(this,function(self,node){var merge=[];var index=0;while(index<len(node.value)){var __left0__=node.value[index];var key_node=__left0__[0];var value_node=__left0__[1];if(key_node.tag=="tag:yaml.org,2002:merge"){delete node.value[index];if(isinstance(value_node,MappingNode)){self.flatten_mapping(value_node);merge.extend(value_node.value)}else if(isinstance(value_node,SequenceNode)){var submerge=[];for(var subnode of value_node.value){if(!isinstance(subnode,
MappingNode)){var __except0__=ConstructorError("while constructing a mapping",node.start_mark,__mod__("expected a mapping for merging, but found %s",subnode.id),subnode.start_mark);__except0__.__cause__=null;throw __except0__;}self.flatten_mapping(subnode);submerge.append(subnode.value)}submerge.reverse();for(var value of submerge)merge.extend(value)}else{var __except0__=ConstructorError("while constructing a mapping",node.start_mark,__mod__("expected a mapping or list of mappings for merging, but found %s",
value_node.id),value_node.start_mark);__except0__.__cause__=null;throw __except0__;}}else if(key_node.tag=="tag:yaml.org,2002:value"){key_node.tag="tag:yaml.org,2002:str";index++}else index++}if(merge)node.value=merge+node.value})},get construct_mapping(){return __get__(this,function(self,node,deep){if(typeof deep=="undefined"||deep!=null&&deep.hasOwnProperty("__kwargtrans__"))var deep=false;if(isinstance(node,MappingNode))self.flatten_mapping(node);return __super__(SafeConstructor,"construct_mapping")(self,
node,__kwargtrans__({deep:deep}))})},get construct_yaml_null(){return __get__(this,function(self,node){self.construct_scalar(node);return null})},bool_values:dict({"yes":true,"no":false,"true":true,"false":false,"on":true,"off":false}),get construct_yaml_bool(){return __get__(this,function(self,node){var value=self.construct_scalar(node);return self.bool_values[value.lower()]})},get construct_yaml_int(){return __get__(this,function(self,node){var value=self.construct_scalar(node);var value=value.py_replace("_",
"");var sign=+1;if(value[0]=="-")var sign=-1;if(__in__(value[0],"+-"))var value=value.__getslice__(1,null,1);if(value=="0")return 0;else if(value.startswith("0b"))return sign*int(value.__getslice__(2,null,1),2);else if(value.startswith("0x"))return sign*int(value.__getslice__(2,null,1),16);else if(value[0]=="0")return sign*int(value,8);else if(__in__(":",value)){var digits=function(){var __accu0__=[];for(var part of value.py_split(":"))__accu0__.append(int(part));return __accu0__}();digits.reverse();
var base=1;var value=0;for(var digit of digits){value+=digit*base;base*=60}return sign*value}else return sign*int(value)})},inf_value:1E300*1E300,nan_value:-(1E300*1E300)/(1E300*1E300),get construct_yaml_float(){return __get__(this,function(self,node){var value=self.construct_scalar(node);var value=value.py_replace("_","").lower();var sign=+1;if(value[0]=="-")var sign=-1;if(__in__(value[0],"+-"))var value=value.__getslice__(1,null,1);if(value==".inf")return sign*self.inf_value;else if(value==".nan")return self.nan_value;
else if(__in__(":",value)){var digits=function(){var __accu0__=[];for(var part of value.py_split(":"))__accu0__.append(float(part));return __accu0__}();digits.reverse();var base=1;var value=0;for(var digit of digits){value+=digit*base;base*=60}return sign*value}else return sign*float(value)})},get construct_yaml_binary(){return __get__(this,function(self,node){try{var value=self.construct_scalar(node).encode("ascii")}catch(__except0__){if(isinstance(__except0__,UnicodeEncodeError)){var exc=__except0__;
var __except1__=ConstructorError(null,null,__mod__("failed to convert base64 data into ascii: %s",exc),node.start_mark);__except1__.__cause__=null;throw __except1__;}else throw __except0__;}try{if(hasattr(base64,"decodebytes"))return base64.decodebytes(value);else return base64.decodestring(value)}catch(__except0__){if(isinstance(__except0__,binascii.Error)){var exc=__except0__;var __except1__=ConstructorError(null,null,__mod__("failed to decode base64 data: %s",exc),node.start_mark);__except1__.__cause__=
null;throw __except1__;}else throw __except0__;}})},timestamp_regexp:re.compile("^(?P<year>[0-9][0-9][0-9][0-9])\n                -(?P<month>[0-9][0-9]?)\n                -(?P<day>[0-9][0-9]?)\n                (?:(?:[Tt]|[ \\t]+)\n                (?P<hour>[0-9][0-9]?)\n                :(?P<minute>[0-9][0-9])\n                :(?P<second>[0-9][0-9])\n                (?:\\.(?P<fraction>[0-9]*))?\n                (?:[ \\t]*(?P<tz>Z|(?P<tz_sign>[-+])(?P<tz_hour>[0-9][0-9]?)\n                (?::(?P<tz_minute>[0-9][0-9]))?))?)?$",
re.X),get construct_yaml_timestamp(){return __get__(this,function(self,node){var value=self.construct_scalar(node);var match=self.timestamp_regexp.match(node.value);var py_values=match.groupdict();var year=int(py_values["year"]);var month=int(py_values["month"]);var day=int(py_values["day"]);if(!py_values["hour"])return datetime.date(year,month,day);var hour=int(py_values["hour"]);var minute=int(py_values["minute"]);var second=int(py_values["second"]);var fraction=0;if(py_values["fraction"]){var fraction=
py_values["fraction"].__getslice__(0,6,1);while(len(fraction)<6)fraction+="0";var fraction=int(fraction)}var delta=null;if(py_values["tz_sign"]){var tz_hour=int(py_values["tz_hour"]);var tz_minute=int(py_values["tz_minute"]||0);var delta=datetime.timedelta(__kwargtrans__({hours:tz_hour,minutes:tz_minute}));if(py_values["tz_sign"]=="-")var delta=-delta}var data=datetime.datetime(year,month,day,hour,minute,second,fraction);if(delta)data-=delta;return data})},get construct_yaml_omap(){return __get__(this,
function*(self,node){var omap=[];yield omap;if(!isinstance(node,SequenceNode)){var __except0__=ConstructorError("while constructing an ordered map",node.start_mark,__mod__("expected a sequence, but found %s",node.id),node.start_mark);__except0__.__cause__=null;throw __except0__;}for(var subnode of node.value){if(!isinstance(subnode,MappingNode)){var __except0__=ConstructorError("while constructing an ordered map",node.start_mark,__mod__("expected a mapping of length 1, but found %s",subnode.id),subnode.start_mark);
__except0__.__cause__=null;throw __except0__;}if(len(subnode.value)!=1){var __except0__=ConstructorError("while constructing an ordered map",node.start_mark,__mod__("expected a single mapping item, but found %d items",len(subnode.value)),subnode.start_mark);__except0__.__cause__=null;throw __except0__;}var __left0__=subnode.value[0];var key_node=__left0__[0];var value_node=__left0__[1];var key=self.construct_object(key_node);var value=self.construct_object(value_node);omap.append(tuple([key,value]))}})},
get construct_yaml_pairs(){return __get__(this,function*(self,node){var pairs=[];yield pairs;if(!isinstance(node,SequenceNode)){var __except0__=ConstructorError("while constructing pairs",node.start_mark,__mod__("expected a sequence, but found %s",node.id),node.start_mark);__except0__.__cause__=null;throw __except0__;}for(var subnode of node.value){if(!isinstance(subnode,MappingNode)){var __except0__=ConstructorError("while constructing pairs",node.start_mark,__mod__("expected a mapping of length 1, but found %s",
subnode.id),subnode.start_mark);__except0__.__cause__=null;throw __except0__;}if(len(subnode.value)!=1){var __except0__=ConstructorError("while constructing pairs",node.start_mark,__mod__("expected a single mapping item, but found %d items",len(subnode.value)),subnode.start_mark);__except0__.__cause__=null;throw __except0__;}var __left0__=subnode.value[0];var key_node=__left0__[0];var value_node=__left0__[1];var key=self.construct_object(key_node);var value=self.construct_object(value_node);pairs.append(tuple([key,
value]))}})},get construct_yaml_set(){return __get__(this,function*(self,node){var data=set();yield data;var value=self.construct_mapping(node);data.py_update(value)})},get construct_yaml_str(){return __get__(this,function(self,node){return self.construct_scalar(node)})},get construct_yaml_seq(){return __get__(this,function*(self,node){var data=[];yield data;data.extend(self.construct_sequence(node))})},get construct_yaml_map(){return __get__(this,function*(self,node){var data=dict({});yield data;
var value=self.construct_mapping(node);data.py_update(value)})},get construct_yaml_object(){return __get__(this,function*(self,node,cls){var data=cls.__new__(cls);yield data;if(hasattr(data,"__setstate__")){var state=self.construct_mapping(node,__kwargtrans__({deep:true}));data.__setstate__(state)}else{var state=self.construct_mapping(node);data.__dict__.py_update(state)}})},get construct_undefined(){return __get__(this,function(self,node){var __except0__=ConstructorError(null,null,__mod__("could not determine a constructor for the tag %r",
node.tag),node.start_mark);__except0__.__cause__=null;throw __except0__;})}});SafeConstructor.add_constructor("tag:yaml.org,2002:null",SafeConstructor.construct_yaml_null);SafeConstructor.add_constructor("tag:yaml.org,2002:bool",SafeConstructor.construct_yaml_bool);SafeConstructor.add_constructor("tag:yaml.org,2002:int",SafeConstructor.construct_yaml_int);SafeConstructor.add_constructor("tag:yaml.org,2002:float",SafeConstructor.construct_yaml_float);SafeConstructor.add_constructor("tag:yaml.org,2002:binary",
SafeConstructor.construct_yaml_binary);SafeConstructor.add_constructor("tag:yaml.org,2002:timestamp",SafeConstructor.construct_yaml_timestamp);SafeConstructor.add_constructor("tag:yaml.org,2002:omap",SafeConstructor.construct_yaml_omap);SafeConstructor.add_constructor("tag:yaml.org,2002:pairs",SafeConstructor.construct_yaml_pairs);SafeConstructor.add_constructor("tag:yaml.org,2002:set",SafeConstructor.construct_yaml_set);SafeConstructor.add_constructor("tag:yaml.org,2002:str",SafeConstructor.construct_yaml_str);
SafeConstructor.add_constructor("tag:yaml.org,2002:seq",SafeConstructor.construct_yaml_seq);SafeConstructor.add_constructor("tag:yaml.org,2002:map",SafeConstructor.construct_yaml_map);SafeConstructor.add_constructor(null,SafeConstructor.construct_undefined);export var Constructor=__class__("Constructor",[SafeConstructor],{__module__:__name__,get construct_python_str(){return __get__(this,function(self,node){return self.construct_scalar(node)})},get construct_python_unicode(){return __get__(this,function(self,
node){return self.construct_scalar(node)})},get construct_python_bytes(){return __get__(this,function(self,node){try{var value=self.construct_scalar(node).encode("ascii")}catch(__except0__){if(isinstance(__except0__,UnicodeEncodeError)){var exc=__except0__;var __except1__=ConstructorError(null,null,__mod__("failed to convert base64 data into ascii: %s",exc),node.start_mark);__except1__.__cause__=null;throw __except1__;}else throw __except0__;}try{if(hasattr(base64,"decodebytes"))return base64.decodebytes(value);
else return base64.decodestring(value)}catch(__except0__){if(isinstance(__except0__,binascii.Error)){var exc=__except0__;var __except1__=ConstructorError(null,null,__mod__("failed to decode base64 data: %s",exc),node.start_mark);__except1__.__cause__=null;throw __except1__;}else throw __except0__;}})},get construct_python_long(){return __get__(this,function(self,node){return self.construct_yaml_int(node)})},get construct_python_complex(){return __get__(this,function(self,node){return complex(self.construct_scalar(node))})},
get construct_python_tuple(){return __get__(this,function(self,node){return tuple(self.construct_sequence(node))})},get find_python_module(){return __get__(this,function(self,py_name,mark){if(!py_name){var __except0__=ConstructorError("while constructing a Python module",mark,"expected non-empty name appended to the tag",mark);__except0__.__cause__=null;throw __except0__;}try{__import__(py_name)}catch(__except0__){if(isinstance(__except0__,ImportError)){var exc=__except0__;var __except1__=ConstructorError("while constructing a Python module",
mark,__mod__("cannot find module %r (%s)",tuple([py_name,exc])),mark);__except1__.__cause__=null;throw __except1__;}else throw __except0__;}return sys.modules[py_name]})},get find_python_name(){return __get__(this,function(self,py_name,mark){if(!py_name){var __except0__=ConstructorError("while constructing a Python object",mark,"expected non-empty name appended to the tag",mark);__except0__.__cause__=null;throw __except0__;}if(__in__(".",py_name)){var __left0__=py_name.rsplit(".",1);var module_name=
__left0__[0];var object_name=__left0__[1]}else{var module_name="builtins";var object_name=py_name}try{__import__(module_name)}catch(__except0__){if(isinstance(__except0__,ImportError)){var exc=__except0__;var __except1__=ConstructorError("while constructing a Python object",mark,__mod__("cannot find module %r (%s)",tuple([module_name,exc])),mark);__except1__.__cause__=null;throw __except1__;}else throw __except0__;}var module=sys.modules[module_name];if(!hasattr(module,object_name)){var __except0__=
ConstructorError("while constructing a Python object",mark,__mod__("cannot find %r in the module %r",tuple([object_name,module.__name__])),mark);__except0__.__cause__=null;throw __except0__;}return getattr(module,object_name)})},get construct_python_name(){return __get__(this,function(self,suffix,node){var value=self.construct_scalar(node);if(value){var __except0__=ConstructorError("while constructing a Python name",node.start_mark,__mod__("expected the empty value, but found %r",value),node.start_mark);
__except0__.__cause__=null;throw __except0__;}return self.find_python_name(suffix,node.start_mark)})},get construct_python_module(){return __get__(this,function(self,suffix,node){var value=self.construct_scalar(node);if(value){var __except0__=ConstructorError("while constructing a Python module",node.start_mark,__mod__("expected the empty value, but found %r",value),node.start_mark);__except0__.__cause__=null;throw __except0__;}return self.find_python_module(suffix,node.start_mark)})},get make_python_instance(){return __get__(this,
function(self,suffix,node,args,kwds,newobj){if(typeof args=="undefined"||args!=null&&args.hasOwnProperty("__kwargtrans__"))var args=null;if(typeof kwds=="undefined"||kwds!=null&&kwds.hasOwnProperty("__kwargtrans__"))var kwds=null;if(typeof newobj=="undefined"||newobj!=null&&newobj.hasOwnProperty("__kwargtrans__"))var newobj=false;if(!args)var args=[];if(!kwds)var kwds=dict({});var cls=self.find_python_name(suffix,node.start_mark);if(newobj&&isinstance(cls,py_metatype))return cls.__new__(cls,...args,
__kwargtrans__(kwds));else return cls(...args,__kwargtrans__(kwds))})},get set_python_instance_state(){return __get__(this,function(self,instance,state){if(hasattr(instance,"__setstate__"))instance.__setstate__(state);else{var slotstate=dict({});if(isinstance(state,tuple)&&len(state)==2){var __left0__=state;var state=__left0__[0];var slotstate=__left0__[1]}if(hasattr(instance,"__dict__"))instance.__dict__.py_update(state);else if(state)slotstate.py_update(state);for(var [key,value]of slotstate.py_items())setattr(object,
key,value)}})},get construct_python_object(){return __get__(this,function*(self,suffix,node){var instance=self.make_python_instance(suffix,node,__kwargtrans__({newobj:true}));yield instance;var deep=hasattr(instance,"__setstate__");var state=self.construct_mapping(node,__kwargtrans__({deep:deep}));self.set_python_instance_state(instance,state)})},get construct_python_object_apply(){return __get__(this,function(self,suffix,node,newobj){if(typeof newobj=="undefined"||newobj!=null&&newobj.hasOwnProperty("__kwargtrans__"))var newobj=
false;if(isinstance(node,SequenceNode)){var args=self.construct_sequence(node,__kwargtrans__({deep:true}));var kwds=dict({});var state=dict({});var listitems=[];var dictitems=dict({})}else{var value=self.construct_mapping(node,__kwargtrans__({deep:true}));var args=value.py_get("args",[]);var kwds=value.py_get("kwds",dict({}));var state=value.py_get("state",dict({}));var listitems=value.py_get("listitems",[]);var dictitems=value.py_get("dictitems",dict({}))}var instance=self.make_python_instance(suffix,
node,args,kwds,newobj);if(state)self.set_python_instance_state(instance,state);if(listitems)instance.extend(listitems);if(dictitems)for(var key of dictitems)instance[key]=dictitems[key];return instance})},get construct_python_object_new(){return __get__(this,function(self,suffix,node){return self.construct_python_object_apply(suffix,node,__kwargtrans__({newobj:true}))})}});Constructor.add_constructor("tag:yaml.org,2002:python/none",Constructor.construct_yaml_null);Constructor.add_constructor("tag:yaml.org,2002:python/bool",
Constructor.construct_yaml_bool);Constructor.add_constructor("tag:yaml.org,2002:python/str",Constructor.construct_python_str);Constructor.add_constructor("tag:yaml.org,2002:python/unicode",Constructor.construct_python_unicode);Constructor.add_constructor("tag:yaml.org,2002:python/bytes",Constructor.construct_python_bytes);Constructor.add_constructor("tag:yaml.org,2002:python/int",Constructor.construct_yaml_int);Constructor.add_constructor("tag:yaml.org,2002:python/long",Constructor.construct_python_long);
Constructor.add_constructor("tag:yaml.org,2002:python/float",Constructor.construct_yaml_float);Constructor.add_constructor("tag:yaml.org,2002:python/complex",Constructor.construct_python_complex);Constructor.add_constructor("tag:yaml.org,2002:python/list",Constructor.construct_yaml_seq);Constructor.add_constructor("tag:yaml.org,2002:python/tuple",Constructor.construct_python_tuple);Constructor.add_constructor("tag:yaml.org,2002:python/dict",Constructor.construct_yaml_map);Constructor.add_multi_constructor("tag:yaml.org,2002:python/name:",
Constructor.construct_python_name);Constructor.add_multi_constructor("tag:yaml.org,2002:python/module:",Constructor.construct_python_module);Constructor.add_multi_constructor("tag:yaml.org,2002:python/object:",Constructor.construct_python_object);Constructor.add_multi_constructor("tag:yaml.org,2002:python/object/apply:",Constructor.construct_python_object_apply);Constructor.add_multi_constructor("tag:yaml.org,2002:python/object/new:",Constructor.construct_python_object_new);

//# sourceMappingURL=constructor.map