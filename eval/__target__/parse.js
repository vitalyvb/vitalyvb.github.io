'use strict';var yaml={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,
filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{Apply,Closure,Def,EvalList,Lambda,List,Module,Nil,Num,Str,Sym,Token1,_List,_Value,reduce,relist,tag}from"./etypes.js";import*as __module_yaml__ from"./yaml.js";__nest__(yaml,"",__module_yaml__);var __name__="parse";export var ParseError=
__class__("ParseError",[Exception],{__module__:__name__});export var comp_to_ast=function(comp){var list_or_one=function(py_items){if(len(py_items)==1)return py_items[0];return py_items};var ast_sym_list=function(item){var s=item.start_mark;var e=item.end_mark;var r=[];for(var p of map(astize,item.value)){if(!isinstance(p,Sym)){print(p.start,__kwargtrans__({end:""}));print("-- 'lambda' parameter must be a symbol");var __except0__=ParseError();__except0__.__cause__=null;throw __except0__;}r.append(p)}return List(s,
e,r)};var ast_lambda=function(s,e,py_items){var l=len(py_items);if(l<2){print(s,__kwargtrans__({end:""}));print("-- 'lambda' requires 2 or more arguments, but has {}".format(l));print(e,__kwargtrans__({end:""}));print("-- unexpected item");var __except0__=ParseError();__except0__.__cause__=null;throw __except0__;}var args=ast_sym_list(py_items[0]);var exps=list_or_one(list(map(astize,py_items.__getslice__(1,null,1))));return Lambda(s,e,args,exps)};var ast_apply=function(s,e,fst,py_items){return Apply(s,
e,fst,py_items)};var seq2ast=function(s,e,py_items,top_level){if(typeof top_level=="undefined"||top_level!=null&&top_level.hasOwnProperty("__kwargtrans__"))var top_level=false;if(len(py_items)>0){var fst=astize(py_items[0]);var other=map(astize,py_items.__getslice__(1,null,1));if(top_level)return EvalList(s,e,list(map(astize,py_items)));else return ast_apply(s,e,fst,list(other))}return List(s,e,[])};var astize=function(item,top_level){if(typeof top_level=="undefined"||top_level!=null&&top_level.hasOwnProperty("__kwargtrans__"))var top_level=
false;var s=item.start_mark;var e=item.end_mark;if(isinstance(item,yaml.ScalarNode)){if(item.tag=="tag:yaml.org,2002:str"&&item.style=='"')return Str(s,e,item.value);if(item.tag=="tag:yaml.org,2002:str"&&item.style=="'"&&__in__('"',item.value))return Str(s,e,item.value);if(item.tag=="tag:yaml.org,2002:str"&&item.style=="'")return Sym(s,e,item.value);if(item.tag=="tag:yaml.org,2002:str"&&item.style===null)return Sym(s,e,item.value);if(item.tag=="tag:yaml.org,2002:int")return Num(s,e,int(item.value));
if(item.tag=="tag:yaml.org,2002:null")return Nil(s,e);print(s,__kwargtrans__({end:""}));print("-- unexpected yaml scalar");var __except0__=ParseError();__except0__.__cause__=null;throw __except0__;}if(isinstance(item,yaml.SequenceNode))return seq2ast(s,e,item.value,top_level);print(s,__kwargtrans__({end:""}));print("-- unexpected yaml node");var __except0__=ParseError();__except0__.__cause__=null;throw __except0__;};return astize(comp,true)};export var parse_to_ast=function(doc,init){if(typeof init==
"undefined"||init!=null&&init.hasOwnProperty("__kwargtrans__"))var init=null;if(init===null)var init=[];else var init=init.v;var c=yaml.compose(doc);var ast=comp_to_ast(c);if(isinstance(ast,EvalList)){init.extend(ast.v);var res=Module(0,0,init)}else{init.append(ast);var res=Module(0,0,init)}return res};if(__name__=="__main__"){var doc="---\n- begin\n- - define\n  - fac'\n  - - lambda\n    - - x\n      - acc\n    - - if\n      - - '='\n        - x\n        - 1\n      - acc\n      - - fac'\n        - - '-'\n          - x\n          - 1\n        - - '*'\n          - acc\n          - x\n\n- - define\n  - fac\n  - - lambda\n    - - x\n    - - fac'\n      - x\n      - 1\n\n- - fac\n  - 5000\n  - null\n";
try{var p=parse_to_ast(doc);print(p.format())}catch(__except0__){if(isinstance(__except0__,ParseError))print("Aborting");else throw __except0__;}};

//# sourceMappingURL=parse.map